// AUTO-GENERATED BY kocha build
// DO NOT EDIT THIS FILE
package main

import (
	"flag"
	"fmt"
	config "{{.configImportPath}}"
	{{if and .dbImportPath .migrationImportPath}}
	db "{{.dbImportPath}}"
	migration "{{.migrationImportPath}}"
	{{end}}
	"os"
	"path/filepath"

	"github.com/woremacx/kocha"
	{{if .resources}}
	"github.com/woremacx/kocha/util"
	{{end}}
)

const Version = "{{.version}}"

func main() {
	progName := filepath.Base(os.Args[0])
	showVersion := flag.Bool("v", false, "show version")
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "usage: %s [-v] [migrate [-db confname] [-n n] {up|down}]\n", progName)
		os.Exit(1)
	}
	flag.Parse()
	if *showVersion {
		fmt.Printf("%s version %s\n", progName, Version)
		os.Exit(0)
	}
	migrate()
	config.AppConfig.ResourceSet = {{.app.ResourceSet|goString}}
	if len(config.AppConfig.RouteTable) != {{.app.Config.RouteTable|len}} {
		fmt.Fprintf(os.Stderr, "abort: length of config.AppConfig.RouteTable is mismatched between build-time and run-time")
		os.Exit(1)
	}
	{{range $name, $data := .resources}}
	config.AppConfig.ResourceSet.Add("{{$name}}", util.Gunzip({{$data|printf "%q"}}))
	{{end}}
	if err := kocha.Run(config.AppConfig); err != nil {
		panic(err)
	}
}

func migrate() {
	if flag.NArg() > 0 {
		switch flag.Arg(0) {
		case "migrate":
			{{if and .dbImportPath .migrationImportPath}}
			fs := flag.NewFlagSet("migrate", flag.ExitOnError)
			dbconf := fs.String("db", "default", "name of a database config")
			n := fs.Int("n", -1, "number of migrations to be run")
			if err := fs.Parse(flag.Args()[1:]); err != nil {
				panic(err)
			}
			config, found := db.DatabaseMap[*dbconf]
			if !found {
				fmt.Fprintf(os.Stderr, "abort: database config `%v' is undefined\n", *dbconf)
				flag.Usage()
			}
			var err error
			mig := kocha.Migrate(config, &migration.Migration{})
			switch fs.Arg(0) {
			case "up":
				err = mig.Up(*n)
			case "down":
				err = mig.Down(*n)
			default:
				flag.Usage()
			}
			if err != nil {
				panic(err)
			}
			os.Exit(0)
			{{else}}
			fmt.Fprintf(os.Stderr, "abort: `migrate' is unsupported in this app binary\n")
			os.Exit(1)
			{{end}}
		default:
			flag.Usage()
		}
	}
}
